//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SJiraCore.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    //using System.ComponentModel.DataAnnotations;
    //using System.ComponentModel.DataAnnotations.Schema;
    using SJiraShared;
    using SJiraShared.Enums;
    //[Table("Sprint")]
    public class Sprint : Entity<Guid>
    {
        public int CompanyId { get; private set; }
        //public string Name { get; set; }
       
        public DateTimeRange DateRange { get; set; }

        private List<Work> _works;
       
      
        public IEnumerable<Work> Works
        {
            get
            {
                return _works.AsEnumerable();
            }
            private set
            {
                _works = (List<Work>)value;
            }
        }

        public Sprint(Guid id, DateTimeRange dateRange, int companyId, IEnumerable<Work> works)
        {
            DateRange = dateRange;
            CompanyId = companyId;
            _works = new List<Work>(works);
        }
        public Sprint()
            : base(Guid.NewGuid())
        {
           
            _works = new List<Work>();
        }
        public Work AddNewWork(Work work)
        {
            if (_works.Any(a => a.Id == work.Id))
            {
                throw new ArgumentException("Cannot add duplicate appointment to sprint.", "appointment");
            }

            work.State = TrackingState.Added;
            _works.Add(work);
            return work;
        }
        public void DeleteWork(Work work)
        {
            var workToDelete = this.Works.Where(a => a.Id == work.Id).FirstOrDefault();
            if (workToDelete != null)
            {
                workToDelete.State = TrackingState.Deleted;
            }
        }
    }
}
